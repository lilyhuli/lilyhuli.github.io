<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TangDon的博客</title>
  
  <subtitle>闷骚男一枚,有党派人士,崇尚各种封建迷信.热爱生活,也爱拉芳.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="lilyhuli.github.io/"/>
  <updated>2019-03-12T14:21:04.742Z</updated>
  <id>lilyhuli.github.io/</id>
  
  <author>
    <name>TangDon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HashMap 与 concurrentHashMap</title>
    <link href="lilyhuli.github.io/2019/03/12/HashMap-%E4%B8%8E-concurrentHashMap/"/>
    <id>lilyhuli.github.io/2019/03/12/HashMap-与-concurrentHashMap/</id>
    <published>2019-03-12T13:49:32.000Z</published>
    <updated>2019-03-12T14:21:04.742Z</updated>
    
    <content type="html"><![CDATA[<p> HashMap<br> 1.7的HashMap<br> <img src="https://javadoop.com/blogimages/map/1.png" alt="Image text"></p><p> <code>static Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt;{     final K key;   V value;   Entry&lt;K,V&gt; next;   int hash; }</code></p><p> HashMap 里是一个数组,然后数组中每一个元素是一个单向链表。<br> 每一个绿色的实体是嵌套类Entry实体 Entry包括 key value hash和用于单向链表的next</p><p> capacity 当前数组的容量 始终保持2^n 可以扩容 扩容后数组大小是当前的2倍</p><p> loadFactor 负载银子 默认为0.75</p><p> threshold：扩容的阈值，等于 capacity * loadFactor</p><p>因为要参与与操作 所以要把数组的大小保持为2的n次方的做法，Java7和Java的HashMap 和 ConcurrentHashMap都有相应要求，只不过实现的代码稍微有些不同</p><p> 由于是双倍扩容 迁移过程中 会将原来的table[i] 中链表的所有节点 分拆到新的数组 newTable[i]和newTable[i+oldLength]位置上。如原来的数组16 那么0索引的数据会被重新安排到0 和16上</p><p> 1.7的ConcurrentHashMap<br> 整个ConcurrentHashMap由一个个Segment组成 Segment代表段的意思<br>，很多地方都叫分段锁，每次加锁都锁住segment 锁的粒度很小，只要保证了每个Segment是线程安全的 也就实现了全局的线程安全 Concurrent默认是16 所以说ConcurrentHashMap 有 16个Segments 最多支持16个线程并发写，还有需要注意的是一旦值初始化是不可以扩容的；</p><p>1.8 HashMap<br><img src="https://javadoop.com/blogimages/map/2.png" alt="Image text"></p><p>和7最大的不同就是利用了红黑树，所以其由 数组+链表+红黑树组成<br>1.7的查找速时间长度取决于链表的长度 O(n) 采用了红黑树之后，当链表元素超过8个自动转成红黑树，时间复杂度变成了O（logn）；</p><p>1.8的ConcurrentHashMap也采用了红黑树</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; HashMap&lt;br&gt; 1.7的HashMap&lt;br&gt; &lt;img src=&quot;https://javadoop.com/blogimages/map/1.png&quot; alt=&quot;Image text&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;code&gt;static Entry&amp;lt;K,V&amp;gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java 之 JUC</title>
    <link href="lilyhuli.github.io/2019/03/12/Untitled/"/>
    <id>lilyhuli.github.io/2019/03/12/Untitled/</id>
    <published>2019-03-12T09:28:56.000Z</published>
    <updated>2019-03-12T12:56:59.305Z</updated>
    
    <content type="html"><![CDATA[<p> java.util.concurrent</p><p> volatile  当多个线程进行操作共享数据时,可以保证内存中的数据是可见的;相较于 synchronized 是一种<br>较为轻量级的同步策略;<br>volatile 不具备”互斥性”;<br>volatile 不能保证变量的”原子性”;</p><p>原子性<br>atomic 提供了常用的原子变量 使用volatile修饰 保证了内存可见性<br>.getAndIncrement() 自增运算</p><p>i++的操作实际上分为三个步骤: “读-改-写”;</p><p>CAS算法是硬件对于并发的支持，针对多处理器操作而设计的处理器中的一种特殊指令，用于管理对共享数据的并发访问；</p><p>CAS是一种无锁的非阻塞算法的实现</p><p>ConcurrentHashMap 同步容器类是java5增加的一个线程安全的哈希表 介于hashmap与hashtable之间 内部采用锁分段机制替代hashtable的独占锁 进而提高性能  关键点 分段锁 替代 独占锁</p><p>此包还提供了设计用于多线程上下文中的Collection实现: ConcurrentHashMap,ConcurrentSkipListMap<br>ConcurrentSkipListSet, CopyOnWriteArrayList 和 CopyOnWriteArraySet;</p><p>当期望许多线程访问一个给定collection时,ConcurrentHashMap通常优于同步的HashMap;<br>ConcurrentSkipListMap通常优于同步的TreeMap;<br>当期望的读数和遍历远远大于列表的更新数时, CopyOnWriteArrayList优于同步的ArrayList;</p><p>CountDownLatch是一个同步辅助类,在完成一组正在其他线程中执行的操作之前,它允许一个或多个线程一直等待;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; java.util.concurrent&lt;/p&gt;
&lt;p&gt; volatile  当多个线程进行操作共享数据时,可以保证内存中的数据是可见的;相较于 synchronized 是一种&lt;br&gt;较为轻量级的同步策略;&lt;br&gt;volatile 不具备”互斥性”;&lt;br&gt;volati
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>springsecurity整合jwt</title>
    <link href="lilyhuli.github.io/2019/01/14/springsecurity%E6%95%B4%E5%90%88jwt/"/>
    <id>lilyhuli.github.io/2019/01/14/springsecurity整合jwt/</id>
    <published>2019-01-14T14:17:54.000Z</published>
    <updated>2020-05-16T04:51:08.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springsecurity-jwt"><a href="#springsecurity-jwt" class="headerlink" title="springsecurity_jwt"></a>springsecurity_jwt</h1><p>springsecurity结合jwt<br>今天写下Spring Security整合jwt的一个简单小Demo，目的是登录后实现返回token</p><p>明天整合通用树形显示和vue前端显示 现在只能通过postman简单测试</p><p>jwt存在争议，但是很容易上手，分布式场景下不能再用ck-session的组合了</p><p>经典的三表结构比昨天的demo更有价值，代码放在Github上了 <a href="https://github.com/lilyhuli/springsecurity_jwt/" target="_blank" rel="noopener">https://github.com/lilyhuli/springsecurity_jwt/</a> 欢迎大家star、issues</p><p>ps：郁闷的七牛云图床必须要绑定备案域名了，后来发现issues直接拖拽就能当做图床，还是不要滥用呀。</p><p><img src="https://user-images.githubusercontent.com/32732399/51117727-956ae280-1849-11e9-8693-eb8787d27935.jpg" alt="Image text"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;springsecurity-jwt&quot;&gt;&lt;a href=&quot;#springsecurity-jwt&quot; class=&quot;headerlink&quot; title=&quot;springsecurity_jwt&quot;&gt;&lt;/a&gt;springsecurity_jwt&lt;/h1&gt;&lt;p&gt;spring
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring Security </title>
    <link href="lilyhuli.github.io/2019/01/14/Spring-Security/"/>
    <id>lilyhuli.github.io/2019/01/14/Spring-Security/</id>
    <published>2019-01-13T16:34:56.000Z</published>
    <updated>2019-01-13T16:44:31.591Z</updated>
    
    <content type="html"><![CDATA[<p>   趁着周末闲来无事学习了一下Spring Security，源码在 <a href></a>lilyhuli/spring_security_exam</p><p>   用到的技术：<br>   java<br>   springboot<br>   mybatis<br>   mysql<br>   后端框架thymeleaf</p><p>需求如下：<br>Security中可以在内存中建立用户，留后门设置后门账号，以及数据库的结合访问。<br>和shiro一样 不同用户拥有不同权限，访问不同网页。<br>如果用户未登录，则返回首页，如果用户已登录，但是没有权限则返回json，告知。</p><pre><code>网上的看了很多文章，Spring Security内置了三个基于投票，AccessDecisionManager实现类，它们分别是AffirmativeBased、ConsensusBased 和UnanimousBased。我觉得继承AccessDecisionManager，然后重写decide方法就可以。当然Spring Security的代码需要一点点debug才能了解其原理。搞完又过0点了，洗洗睡了，梦里啥都有。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;   趁着周末闲来无事学习了一下Spring Security，源码在 &lt;a href&gt;&lt;/a&gt;lilyhuli/spring_security_exam&lt;/p&gt;
&lt;p&gt;   用到的技术：&lt;br&gt;   java&lt;br&gt;   springboot&lt;br&gt;   mybatis&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>又是一年末尾</title>
    <link href="lilyhuli.github.io/2018/12/25/%E5%8F%88%E6%98%AF%E4%B8%80%E5%B9%B4%E6%9C%AB%E5%B0%BE/"/>
    <id>lilyhuli.github.io/2018/12/25/又是一年末尾/</id>
    <published>2018-12-24T16:31:00.000Z</published>
    <updated>2019-01-13T16:33:42.291Z</updated>
    
    <content type="html"><![CDATA[<p>这一年不仅没有完成爸妈所说的人生大事，还把工作搞得一团糟。读了几本书，看了几部剧，就想把感想和经历写下来，毕竟好多年都没写总结了。</p><p>  1，《简爱》 </p><pre><code>长大了再读《简爱》真觉得简爱是一个自怨自艾的玛丽苏，根本没有灰姑娘的容颜，也没有纯洁谦卑，外柔内刚的品质，有的只是孤傲清高，目中无人，乖戾而非可爱，敏感且自卑，自我为中心，童年的经历给了她太多不幸，当然也影响了她的决定，她本不该，出身无法决定，但能决定的一定要好好把握；而《呼啸山庄》那种坏就是要坏的彻底，悲剧就是要绑架你；</code></pre><p>  2，《东京女子图鉴》</p><pre><code>绫在干什么？同作为一个京漂，绫这么富有野心，怎么可能找到和她一样的人呢，她看不起自己的阶层，厌恶自己的出身，她并不喜欢自己，努力去除自己身上的土气，那个面对阶级凝固努力想要嫁入上层阶级的绫，真当有平配自己的伴侣在一起时，要么嫌过于平凡，要么觉得对方野心太重，要么觉得对方无聊，最后都不欢而散，她只喜欢自己高攀不起的港区男，同样港区男是不会选择她的。成熟后的人多可怕，没有感情波动，和《黑镜》里玩大数据匹配伴侣的那集很像，不过黑镜的结局都要好过图鉴了，大多数东京人在工作中挣扎着对感情的投入太有限了。不过这样才显得更真实，毕竟电视剧和小说放大了感情，让你觉得它很重要；作为职业白领，绫的结婚只是她的一个目标，日本压抑的社会关系真让人喘不过气，偶像剧是泛娱乐时代的毒品，从早到晚谈恋爱，贫女出门遇见高富帅。</code></pre><p>3， 极简生活</p><pre><code>加入极简生活小组之后，发现大多数人的极简主义就是扔扔扔，这是一种的变相的消费升级，不是极简主义。对于像我这么穷的人来说，极简主义是断舍离，减物欲。购买物品所带来的快感实在太短了，在精美的包装下它让人非常期待，一旦拆开，我就要担心它会不会又磕伤划痕，变旧过时，这样所带来的只能是重蹈覆辙，不断陷入消费主义的陷阱里，不能自拔，这就非常恐怖了；我不是一个批判家，也没有资格判断，社会的标尺太沉重，对错正邪都只是前人框定好的，没有机会去定义，没有勇气去改变，更不是为了安利极简主义的生活方式，生活方式是自己决定的，根本没有对错，只要能让自己内心充盈，关注更重要的事，不必为了琐碎浪费时间。</code></pre><p>4， 情感</p><pre><code>在我看来，爱情在只不过是一小段插曲，是日常生活中诸多事务中的一件小事，这些都是从我的斗争经历里得出的。喜欢你的人会把你的沉默寡言看成斯文乖巧，莽撞冒失也可以是可爱娇痴，甚至脾气暴躁都可以是豁达爽朗；不喜欢你的人则把关心当做打扰，沉默当成冷落，你精心准备的心思会被当做神经质。所以形容词最不靠谱，舔狗也不得house。就没有那种成熟平等的恋爱么，再炙热也不过火，再沉默也不觉得是冷漠。恐惧不期而遇的爱蔓延，那种没有回应的尴尬和苦涩。毛姆不就说： “女人可以原谅男人伤害他，但绝不能原谅男人为她做出牺牲” ，毛姆是一个仇女的人，但他这句话说的很对。《一千零一夜》里的王后会沉迷每天对她暴虐的人，但是却对爱她的国王熟视无睹；所以不要对一个不爱你的人好，只会让自己显得更廉价。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这一年不仅没有完成爸妈所说的人生大事，还把工作搞得一团糟。读了几本书，看了几部剧，就想把感想和经历写下来，毕竟好多年都没写总结了。&lt;/p&gt;
&lt;p&gt;  1，《简爱》 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;长大了再读《简爱》真觉得简爱是一个自怨自艾的玛丽苏，根本没有灰姑娘的容颜，也没
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo博客的诞生</title>
    <link href="lilyhuli.github.io/2017/11/10/hexo/"/>
    <id>lilyhuli.github.io/2017/11/10/hexo/</id>
    <published>2017-11-10T09:52:00.000Z</published>
    <updated>2020-05-16T04:55:39.804Z</updated>
    
    <content type="html"><![CDATA[<p>该博客托管在github pages上，所以免去了备案等手续，域名还没有申请，暂时先用github的<br>。</p>   <p>友：市面上已经有很多现成的博客平台，为什么还要自己搭建一个？<br><br>   我：想到搭建的目的，一来是自己的拖延症越来越严重，一点点小借口都能摧毁曾经燃起的雄雄壮志，做一个独立博客，记录生活点滴，技术感悟，希望自己能成长的快些；二来作为个人营销的门面，喜欢卖弄和自我营销的我当然还建一个独立的博客，简单的博客没什么技术含量，所以才更注重内容，符合极简主义的定位。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该博客托管在github pages上，所以免去了备案等手续，域名还没有申请，暂时先用github的&lt;br&gt;。&lt;/p&gt;


   &lt;p&gt;友：市面上已经有很多现成的博客平台，为什么还要自己搭建一个？&lt;br&gt;&lt;br&gt;   我：想到搭建的目的，一来是自己的拖延症越来越严重，一点点
      
    
    </summary>
    
    
      <category term="hexo" scheme="lilyhuli.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
